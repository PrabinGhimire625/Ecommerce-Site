npm init -y  //package.json
npm i express
npm i  nodemon

n
pm i --save-dev typescript   //install typescript for development
npm install @types/express --save-dev    
npm install @types/node --save-dev 
npm install sequelize-typescript
npm install @types/jsonwebtoken --save-dev
npm install @types/multer --save-dev
npm install @types/bcrypt --save-dev
npm install rimraf --save-dev  //delete files and directories


//for typescript json
npx tsc --init   //for typescript json file
npm tsc   //convert tsc file to js
node build/server.js   //run the build folder
"scripts": {
    "start":"npx tsc && node build/server.js"
},

npm i tsc-node //to execute the ts file without convert to the build
create the nodemon.json by ourself and write inside it
{
    "watch": ["src"],
    "ext":".ts,.js",
    "ignore":[],
    "exec": "npx ts-node ./src/server.ts"
}

//on creating table
npm i reflect-metadata

// enable this in tsConfig.json for @Columnname
"experimentalDecorators": true,                   
"emitDecoratorMetadata": true,   

//join in sequelize
const product =await Product.findAll(
      {include:[
        {model:User, attributes:['email','username']},
        {model:Category, attributes:['categoryName',]},
      ]
      });


//row in the table for ecommerce site
users:id,username,email,password,role
products:id,productName,productDescription,productTotalStockQty,productImageUrl,userId(fk), categoryId(fk)
categories:id,categoryName
carts:id,quantity,userId(fk),productId(fk)
orders:id, phoneNumber,shippingAddress, totalAmount,orderStatus,paymentId(fk),userId(fk)
orderDetails:id,quantity,orderId(fk),prodductId(fk)
payments:id,paymentMethod,paymentStatus,pidx
